//
// TextEdit.swift
// Generated by sdef2swift
//
import Foundation
import ScriptingBridge
import AppKit

/// Protocol for ScriptingBridge Objects.
///
/// This protocol defines the basic functionality for ScriptingBridge objects.
@objc public protocol TextEditSBObjectProtocol: NSObjectProtocol {
    func get() -> Any!
}
extension SBObject: TextEditSBObjectProtocol {}

/// Protocol for ScriptingBridge Applications.
///
/// This protocol defines the basic functionality for ScriptingBridge applications.
@objc public protocol TextEditSBApplicationProtocol: TextEditSBObjectProtocol {
    // MARK: - Core Application Methods

    /// Activate the application, bringing it to the foreground.
    func activate()

    /// The application's delegate for handling Scripting Bridge events.
    var delegate: SBApplicationDelegate! { get set }

    /// Whether the application is currently running.
    var isRunning: Bool { get }

    // MARK: - Standard Suite Commands

    /// Close an object.
    /// - Parameters:
    ///   - directParameter: The object for the command
    ///   - saving: Specifies whether changes should be saved before closing.
    ///   - savingIn: The file in which to save the object.
    @objc(close:saving:savingIn:) optional func coreclos(_ directParameter: SBObject, saving: TextEdit.Savo, savingIn: URL?)

    /// Return the number of elements of a particular class within an object.
    /// - Parameters:
    ///   - directParameter: The object for the command
    ///   - each: The class of objects to be counted.
    /// - Returns: The command result
    @objc(count:each:) optional func corecnte(_ directParameter: SBObject, each: OSType) -> Int

    /// Delete an object.
    /// - Parameters:
    ///   - directParameter: The object for the command
    @objc(delete:) optional func coredelo(_ directParameter: SBObject)

    /// Copy object(s) and put the copies at a new location.
    /// - Parameters:
    ///   - directParameter: The object for the command
    ///   - to: The location for the new object(s).
    ///   - withProperties: Properties to be set in the new duplicated object(s).
    @objc(duplicate:to:withProperties:) optional func coreclon(_ directParameter: SBObject, to: SBObject?, withProperties: [String: Any]?)

    /// Verify if an object exists.
    /// - Parameters:
    ///   - directParameter: The object for the command
    /// - Returns: The command result
    @objc(exists:) optional func coredoex(_ directParameter: SBObject) -> Bool

    /// Get the data for an object.
    /// - Parameters:
    ///   - directParameter: The object for the command
    /// - Returns: The command result
    @objc(get:) optional func coregetd(_ directParameter: SBObject) -> Any

    /// Make a new object.
    /// - Parameters:
    ///   - new: The class of the new object.
    ///   - at: The location at which to insert the object.
    ///   - withData: The initial data for the object.
    ///   - withProperties: The initial values for properties of the object.
    /// - Returns: The command result
    @objc(makenew:at:withData:withProperties:) optional func corecrel(new: OSType, at: SBObject?, withData: Any?, withProperties: [String: Any]?) -> SBObject

    /// Move object(s) to a new location.
    /// - Parameters:
    ///   - directParameter: The object for the command
    ///   - to: The new location for the object(s).
    @objc(move:to:) optional func coremove(_ directParameter: SBObject, to: SBObject)

    /// Open an object.
    /// - Parameters:
    ///   - directParameter: The file(s) to be opened.
    /// - Returns: The command result
    @objc(open:) optional func aevtodoc(_ directParameter: URL) -> TextEdit.Document

    /// Print an object.
    /// - Parameters:
    ///   - directParameter: The file(s) or document(s) to be printed.
    ///   - printDialog: Should the application show the Print dialog?
    ///   - withProperties: The print settings
    @objc(print:printDialog:withProperties:) optional func aevtpdoc(_ directParameter: URL, printDialog: Bool, withProperties: [String: Any]?)

    /// Quit an application.
    /// - Parameters:
    ///   - saving: Specifies whether changes should be saved before quitting.
    @objc(quitsaving:) optional func aevtquit(saving: TextEdit.Savo)

    /// Save an object.
    /// - Parameters:
    ///   - directParameter: The object for the command
    ///   - `as`: The file type in which to save the data.
    ///   - `in`: The file in which to save the object.
    @objc(save:as:in:) optional func coresave(_ directParameter: SBObject, `as`: String, `in`: URL?)

    /// Set an object's data.
    /// - Parameters:
    ///   - directParameter: The object for the command
    ///   - to: The new value.
    @objc(set:to:) optional func coresetd(_ directParameter: SBObject, to: Any)

}
extension SBApplication: TextEditSBApplicationProtocol {}

// MARK: - Generic Methods Protocol

@objc public protocol TextEditGenericMethods {
    /// Close the object.
    ///
    /// This closes the receiver object,
    /// optionally saving it.
    /// - Parameters:
    ///   - saving: The save option to use (`.no`, `.yes`, or `.ask`).
    ///   - savingIn: The URL to save the object in or `nil` for the default location.
    @objc optional func closeSaving(_ saving: TextEdit.Savo, savingIn: URL?)
    /// Save the object.
    ///
    /// This saves the receiver object.
    /// - Parameters:
    ///   - url: The URL to save the object in or `nil` for the default location.
    ///   - as: The format to save the object as or `nil` for the default format.
    @objc optional func saveIn(_ url: URL?, as: Any?)
    /// Print the object.
    ///
    /// This prints the receiver object.
    /// - Parameters:
    ///   - withProperties: The properties to use for printing or `nil` for the default properties.
    ///   - printDialog: Whether to show the print dialog or not.
    @objc optional func printWithProperties(_ withProperties: [String: Any]?, printDialog: Bool)
    /// Delete the receiver.
    ///
    /// This deletes the receiver object.
    @objc(delete) optional func sbDelete()
    /// Duplicate the receiver.
    ///
    /// This duplicates the receiver object.
    /// - Parameters:
    ///   - to: The location to duplicate the object to or `nil` for the default location.
    ///   - withProperties: The properties to use for duplication or `nil` for the default properties.
    @objc optional func duplicateTo(_ to: SBObject?, withProperties: [String: Any]?)
    /// Move the object.
    ///
    /// This moves the receiver object.
    /// - Parameters:
    ///   - to: The location to move the object to or `nil` for the default location.
    @objc optional func moveTo(_ to: SBObject?)
}

public extension TextEditGenericMethods {
    /// Close the object.
    ///
    /// This closes the receiver object,
    /// optionally saving it.
    /// - Parameters:
    ///   - saving: `.yes` to save, `.no` to discard, `.ask` to ask.
    ///   - url: The URL to save the object to or `nil` for the default URL.
    @inlinable
    func close(saving: TextEdit.Savo = .ask, url: URL? = nil) {
        closeSaving?(saving, savingIn: url)
    }
    /// Save the object.
    ///
    /// This saves the receiver object.
    /// - Parameters:
    ///   - to: The URL to save the object to or `nil` for the default URL.
    ///   - as: The format to save the object as or `nil` for the default format.
    @inlinable
    func save(to url: URL? = nil, as format: Any? = nil) {
        saveIn?(url, as: format)
    }
    /// Print the object.
    ///
    /// This prints the receiver object.
    /// - Parameters:
    ///   - properties: The properties to print the object with.
    ///   - showingPrintDialog: Whether to show the print dialog.
    @inlinable
    func print(properties: [String: Any]? = nil, showingPrintDialog: Bool = false) {
        printWithProperties?(properties, printDialog: showingPrintDialog)
    }
    /// Delete the receiver.
    ///
    /// This deletes the receiver object.
    @inlinable
    @discardableResult
    func delete() -> Bool {
        sbDelete?() != nil
    }
    /// Duplicate the object.
    ///
    /// This duplicates the receiver object.
    /// - Parameters:
    ///   - to: The destination object or `nil` for the default destination.
    ///   - properties: The properties to set on the duplicated object.
    @inlinable
    func duplicate(to destination: SBObject? = nil, properties: [String: Any]? = nil) {
        duplicateTo?(destination, withProperties: properties)
    }
    /// Move the object.
    ///
    /// This moves the receiver object.
    /// - Parameters:
    ///   - to: The destination object or `nil` for the default destination.
    @inlinable
    func move(to destination: SBObject? = nil) {
        moveTo?(destination)
    }
}

// MARK: - Application Protocol

@objc public protocol TextEditApplicationProtocol: TextEditSBApplicationProtocol {
    /// Array of document objects - A document.
    @objc optional func documents() -> SBElementArray
    /// Array of window objects - A window.
    @objc optional func windows() -> SBElementArray
    // MARK: - Standard Suite Commands
    /// Close an object.
    /// - Parameters:
    ///   - directParameter: The object for the command
    ///   - saving: Specifies whether changes should be saved before closing.
    ///   - savingIn: The file in which to save the object.
    @objc(close:saving:savingIn:) optional func coreclos(_ directParameter: SBObject, saving: TextEdit.Savo, savingIn: URL?)
    /// Return the number of elements of a particular class within an object.
    /// - Parameters:
    ///   - directParameter: The object for the command
    ///   - each: The class of objects to be counted.
    /// - Returns: The command result
    @objc(count:each:) optional func corecnte(_ directParameter: SBObject, each: OSType) -> Int
    /// Delete an object.
    /// - Parameters:
    ///   - directParameter: The object for the command
    @objc(delete:) optional func coredelo(_ directParameter: SBObject)
    /// Copy object(s) and put the copies at a new location.
    /// - Parameters:
    ///   - directParameter: The object for the command
    ///   - to: The location for the new object(s).
    ///   - withProperties: Properties to be set in the new duplicated object(s).
    @objc(duplicate:to:withProperties:) optional func coreclon(_ directParameter: SBObject, to: SBObject?, withProperties: [String: Any]?)
    /// Verify if an object exists.
    /// - Parameters:
    ///   - directParameter: The object for the command
    /// - Returns: The command result
    @objc(exists:) optional func coredoex(_ directParameter: SBObject) -> Bool
    /// Get the data for an object.
    /// - Parameters:
    ///   - directParameter: The object for the command
    /// - Returns: The command result
    @objc(get:) optional func coregetd(_ directParameter: SBObject) -> Any
    /// Make a new object.
    /// - Parameters:
    ///   - new: The class of the new object.
    ///   - at: The location at which to insert the object.
    ///   - withData: The initial data for the object.
    ///   - withProperties: The initial values for properties of the object.
    /// - Returns: The command result
    @objc(makenew:at:withData:withProperties:) optional func corecrel(new: OSType, at: SBObject?, withData: Any?, withProperties: [String: Any]?) -> SBObject
    /// Move object(s) to a new location.
    /// - Parameters:
    ///   - directParameter: The object for the command
    ///   - to: The new location for the object(s).
    @objc(move:to:) optional func coremove(_ directParameter: SBObject, to: SBObject)
    /// Open an object.
    /// - Parameters:
    ///   - directParameter: The file(s) to be opened.
    /// - Returns: The command result
    @objc(open:) optional func aevtodoc(_ directParameter: URL) -> TextEdit.Document
    /// Print an object.
    /// - Parameters:
    ///   - directParameter: The file(s) or document(s) to be printed.
    ///   - printDialog: Should the application show the Print dialog?
    ///   - withProperties: The print settings
    @objc(print:printDialog:withProperties:) optional func aevtpdoc(_ directParameter: URL, printDialog: Bool, withProperties: [String: Any]?)
    /// Quit an application.
    /// - Parameters:
    ///   - saving: Specifies whether changes should be saved before quitting.
    @objc(quitsaving:) optional func aevtquit(saving: TextEdit.Savo)
    /// Save an object.
    /// - Parameters:
    ///   - directParameter: The object for the command
    ///   - `as`: The file type in which to save the data.
    ///   - `in`: The file in which to save the object.
    @objc(save:as:in:) optional func coresave(_ directParameter: SBObject, `as`: String, `in`: URL?)
    /// Set an object's data.
    /// - Parameters:
    ///   - directParameter: The object for the command
    ///   - to: The new value.
    @objc(set:to:) optional func coresetd(_ directParameter: SBObject, to: Any)
}


// MARK: - TextEditApplicationProtocol Convenience Methods

public extension TextEditApplicationProtocol {

    // MARK: Standard Suite Commands
    /// Close an object.
    /// - Parameters:
    ///   - directParameter: The object for the command
    ///   - saving: Specifies whether changes should be saved before closing.
    ///   - savingIn: The file in which to save the object.
    @inlinable
    func close(_ directParameter: SBObject, saving: TextEdit.Savo = .ask, savingIn: URL? = nil) {
        coreclos?(directParameter, saving: saving, savingIn: savingIn)
    }

    /// Return the number of elements of a particular class within an object.
    /// - Parameters:
    ///   - directParameter: The object for the command
    ///   - each: The class of objects to be counted.
    /// - Returns: The command result
    @inlinable
    func count(_ directParameter: SBObject, each: OSType) -> Int! {
        corecnte?(directParameter, each: each)
    }

    /// Delete an object.
    /// - Parameters:
    ///   - directParameter: The object for the command
    @inlinable
    func delete(_ directParameter: SBObject) {
        coredelo?(directParameter)
    }

    /// Copy object(s) and put the copies at a new location.
    /// - Parameters:
    ///   - directParameter: The object for the command
    ///   - to: The location for the new object(s).
    ///   - withProperties: Properties to be set in the new duplicated object(s).
    @inlinable
    func duplicate(_ directParameter: SBObject, to: SBObject? = nil, withProperties: [String: Any]? = nil) {
        coreclon?(directParameter, to: to, withProperties: withProperties)
    }

    /// Verify if an object exists.
    /// - Parameters:
    ///   - directParameter: The object for the command
    /// - Returns: The command result
    @inlinable
    func exists(_ directParameter: SBObject) -> Bool! {
        coredoex?(directParameter)
    }

    /// Get the data for an object.
    /// - Parameters:
    ///   - directParameter: The object for the command
    /// - Returns: The command result
    @inlinable
    func get(_ directParameter: SBObject) -> Any! {
        coregetd?(directParameter)
    }

    /// Make a new object.
    /// - Parameters:
    ///   - new: The class of the new object.
    ///   - at: The location at which to insert the object.
    ///   - withData: The initial data for the object.
    ///   - withProperties: The initial values for properties of the object.
    /// - Returns: The command result
    @inlinable
    func make(new: OSType, at: SBObject? = nil, withData: Any? = nil, withProperties: [String: Any]? = nil) -> SBObject! {
        corecrel?(new: new, at: at, withData: withData, withProperties: withProperties)
    }

    /// Move object(s) to a new location.
    /// - Parameters:
    ///   - directParameter: The object for the command
    ///   - to: The new location for the object(s).
    @inlinable
    func move(_ directParameter: SBObject, to: SBObject) {
        coremove?(directParameter, to: to)
    }

    /// Open an object.
    /// - Parameters:
    ///   - directParameter: The file(s) to be opened.
    /// - Returns: The command result
    @inlinable
    func open(_ directParameter: URL) -> TextEdit.Document! {
        aevtodoc?(directParameter)
    }

    /// Print an object.
    /// - Parameters:
    ///   - directParameter: The file(s) or document(s) to be printed.
    ///   - printDialog: Should the application show the Print dialog?
    ///   - withProperties: The print settings
    @inlinable
    func print(_ directParameter: URL, printDialog: Bool = false, withProperties: [String: Any]? = nil) {
        aevtpdoc?(directParameter, printDialog: printDialog, withProperties: withProperties)
    }

    /// Quit an application.
    /// - Parameters:
    ///   - saving: Specifies whether changes should be saved before quitting.
    @inlinable
    func quit(saving: TextEdit.Savo = .ask) {
        aevtquit?(saving: saving)
    }

    /// Save an object.
    /// - Parameters:
    ///   - directParameter: The object for the command
    ///   - `as`: The file type in which to save the data.
    ///   - `in`: The file in which to save the object.
    @inlinable
    func save(_ directParameter: SBObject, `as`: String, `in`: URL? = nil) {
        coresave?(directParameter, as: `as`, in: `in`)
    }

    /// Set an object's data.
    /// - Parameters:
    ///   - directParameter: The object for the command
    ///   - to: The new value.
    @inlinable
    func set(_ directParameter: SBObject, to: Any) {
        coresetd?(directParameter, to: to)
    }

}


// MARK: - TextEdit Namespace

/// Namespace for all TextEdit scripting types.
public enum TextEdit {

    // MARK: - Type Aliases
    public typealias Object = SBObject
    public typealias ElementArray = SBElementArray

    // MARK: - Common Value Types
    /// Represents an RGB color value
    public typealias RGBColor = NSColor
    /// Represents a TIFF picture
    public typealias TIFFPicture = NSImage

    // MARK: - Scripting Class Names

    /// An enumeration of all scripting class names defined in the SDEF.
    ///
    /// These string constants can be used when working with the Scripting Bridge
    /// to reference specific scriptable classes by name.
    public enum ClassNames {
        public static let application = "application"
        public static let attachment = "attachment"
        public static let attributeRun = "attribute run"
        public static let character = "character"
        public static let color = "color"
        public static let document = "document"
        public static let item = "item"
        public static let paragraph = "paragraph"
        public static let printSettings = "print settings"
        public static let text = "text"
        public static let window = "window"
        public static let word = "word"
    }

    // MARK: - savo
    @objc public enum Savo: AEKeyword, Sendable {
        /// Ask the user whether or not to save the file.
        case ask = 0x61736b20
        /// Do not save the file.
        case no = 0x6e6f2020
        /// Save the file.
        case yes = 0x79657320
    }

    // MARK: - enum
    @objc public enum Enum: AEKeyword, Sendable {
        /// Standard PostScript error handling
        case standard = 0x6c777374
        /// Print a detailed report of PostScript errors
        case detailed = 0x6c776474
    }

    // MARK: - application
    /// An application's top level scripting object.
    @objc(TextEditApplication) public protocol Application: TextEditApplicationProtocol, TextEditGenericMethods, Item {
        /// Is this the frontmost (active) application?
        @objc optional var frontmost: Bool { get }
        /// The name of the application.
        @objc optional var name: String { get }
        /// The version of the application.
        @objc optional var version: String { get }
        /// Array of document objects - a document.
        @objc(documents) optional func untypedDocuments() -> SBElementArray
        /// Array of window objects - a window.
        @objc(windows) optional func untypedWindows() -> SBElementArray

        // MARK: - Standard Suite Commands
    /// Close an object.
    /// - Parameters:
    ///   - directParameter: The object for the command
    ///   - saving: Specifies whether changes should be saved before closing.
    ///   - savingIn: The file in which to save the object.
    @objc(close:saving:savingIn:) optional func coreclos(_ directParameter: SBObject, saving: TextEdit.Savo, savingIn: URL?)
    /// Return the number of elements of a particular class within an object.
    /// - Parameters:
    ///   - directParameter: The object for the command
    ///   - each: The class of objects to be counted.
    /// - Returns: The command result
    @objc(count:each:) optional func corecnte(_ directParameter: SBObject, each: OSType) -> Int
    /// Delete an object.
    /// - Parameters:
    ///   - directParameter: The object for the command
    @objc(delete:) optional func coredelo(_ directParameter: SBObject)
    /// Copy object(s) and put the copies at a new location.
    /// - Parameters:
    ///   - directParameter: The object for the command
    ///   - to: The location for the new object(s).
    ///   - withProperties: Properties to be set in the new duplicated object(s).
    @objc(duplicate:to:withProperties:) optional func coreclon(_ directParameter: SBObject, to: SBObject?, withProperties: [String: Any]?)
    /// Verify if an object exists.
    /// - Parameters:
    ///   - directParameter: The object for the command
    /// - Returns: The command result
    @objc(exists:) optional func coredoex(_ directParameter: SBObject) -> Bool
    /// Get the data for an object.
    /// - Parameters:
    ///   - directParameter: The object for the command
    /// - Returns: The command result
    @objc(get:) optional func coregetd(_ directParameter: SBObject) -> Any
    /// Make a new object.
    /// - Parameters:
    ///   - new: The class of the new object.
    ///   - at: The location at which to insert the object.
    ///   - withData: The initial data for the object.
    ///   - withProperties: The initial values for properties of the object.
    /// - Returns: The command result
    @objc(makenew:at:withData:withProperties:) optional func corecrel(new: OSType, at: SBObject?, withData: Any?, withProperties: [String: Any]?) -> SBObject
    /// Move object(s) to a new location.
    /// - Parameters:
    ///   - directParameter: The object for the command
    ///   - to: The new location for the object(s).
    @objc(move:to:) optional func coremove(_ directParameter: SBObject, to: SBObject)
    /// Open an object.
    /// - Parameters:
    ///   - directParameter: The file(s) to be opened.
    /// - Returns: The command result
    @objc(open:) optional func aevtodoc(_ directParameter: URL) -> TextEdit.Document
    /// Print an object.
    /// - Parameters:
    ///   - directParameter: The file(s) or document(s) to be printed.
    ///   - printDialog: Should the application show the Print dialog?
    ///   - withProperties: The print settings
    @objc(print:printDialog:withProperties:) optional func aevtpdoc(_ directParameter: URL, printDialog: Bool, withProperties: [String: Any]?)
    /// Quit an application.
    /// - Parameters:
    ///   - saving: Specifies whether changes should be saved before quitting.
    @objc(quitsaving:) optional func aevtquit(saving: TextEdit.Savo)
    /// Save an object.
    /// - Parameters:
    ///   - directParameter: The object for the command
    ///   - `as`: The file type in which to save the data.
    ///   - `in`: The file in which to save the object.
    @objc(save:as:in:) optional func coresave(_ directParameter: SBObject, `as`: String, `in`: URL?)
    /// Set an object's data.
    /// - Parameters:
    ///   - directParameter: The object for the command
    ///   - to: The new value.
    @objc(set:to:) optional func coresetd(_ directParameter: SBObject, to: Any)
    }

    // MARK: - color
    /// A color.
    @objc(TextEditColor) public protocol Color: TextEditSBObjectProtocol, Item {
    }

    // MARK: - document
    /// A document.
    @objc(TextEditDocument) public protocol Document: TextEditSBObjectProtocol, TextEditGenericMethods, Item {
        /// Has the document been modified since the last save?
        @objc optional var modified: Bool { get }
        /// The document's name.
        @objc optional var name: String { get set }
        /// The document's path.
        @objc optional var path: String { get set }
    }

    // MARK: - item
    /// A scriptable object.
    @objc(TextEditItem) public protocol Item: TextEditSBObjectProtocol {
        /// The class of the object.
        @objc optional var `class`: OSType { get }
        /// All of the object's properties.
        @objc optional var properties: [String: Any] { get set }
    }

    // MARK: - window
    /// A window.
    @objc(TextEditWindow) public protocol Window: TextEditSBObjectProtocol, TextEditGenericMethods, Item {
        /// The bounding rectangle of the window.
        @objc optional var bounds: NSRect { get set }
        /// Whether the window has a close box.
        @objc optional var closeable: Bool { get }
        /// The document whose contents are being displayed in the window.
        @objc optional var document: Document { get }
        /// Whether the window floats.
        @objc optional var floating: Bool { get }
        /// The unique identifier of the window.
        @objc optional var id: Int { get }
        /// The index of the window, ordered front to back.
        @objc optional var index: Int { get set }
        /// Whether the window can be miniaturized.
        @objc optional var miniaturizable: Bool { get }
        /// Whether the window is currently miniaturized.
        @objc optional var miniaturized: Bool { get set }
        /// Whether the window is the application's current modal window.
        @objc optional var modal: Bool { get }
        /// The full title of the window.
        @objc optional var name: String { get set }
        /// Whether the window can be resized.
        @objc optional var resizable: Bool { get }
        /// Whether the window has a title bar.
        @objc optional var titled: Bool { get }
        /// Whether the window is currently visible.
        @objc optional var visible: Bool { get set }
        /// Whether the window can be zoomed.
        @objc optional var zoomable: Bool { get }
        /// Whether the window is currently zoomed.
        @objc optional var zoomed: Bool { get set }
    }

    // MARK: - attachment
    /// Represents an inline text attachment.  This class is used mainly for make commands.
    @objc(TextEditAttachment) public protocol Attachment: TextEditSBObjectProtocol {
        /// The path to the file for the attachment
        @objc optional var fileName: String { get set }
    }

    // MARK: - attribute run
    /// This subdivides the text into chunks that all have the same attributes.
    @objc(TextEditAttributeRun) public protocol AttributeRun: TextEditSBObjectProtocol, Item {
        /// The color of the first character.
        @objc optional var color: Color { get set }
        /// The name of the font of the first character.
        @objc optional var font: String { get set }
        /// The size in points of the first character.
        @objc optional var size: Int { get set }
        /// Array of attachment objects - represents an inline text attachment.  This class is used mainly for make commands.
        @objc(attachments) optional func untypedAttachments() -> SBElementArray
        /// Array of attribute run objects - this subdivides the text into chunks that all have the same attributes.
        @objc(attributeRuns) optional func untypedAttributeRuns() -> SBElementArray
        /// Array of character objects - this subdivides the text into characters.
        @objc(characters) optional func untypedCharacters() -> SBElementArray
        /// Array of paragraph objects - this subdivides the text into paragraphs.
        @objc(paragraphs) optional func untypedParagraphs() -> SBElementArray
        /// Array of word objects - this subdivides the text into words.
        @objc(words) optional func untypedWords() -> SBElementArray
    }

    // MARK: - character
    /// This subdivides the text into characters.
    @objc(TextEditCharacter) public protocol Character: TextEditSBObjectProtocol, Item {
        /// The color of the first character.
        @objc optional var color: Color { get set }
        /// The name of the font of the first character.
        @objc optional var font: String { get set }
        /// The size in points of the first character.
        @objc optional var size: Int { get set }
        /// Array of attachment objects - represents an inline text attachment.  This class is used mainly for make commands.
        @objc(attachments) optional func untypedAttachments() -> SBElementArray
        /// Array of attribute run objects - this subdivides the text into chunks that all have the same attributes.
        @objc(attributeRuns) optional func untypedAttributeRuns() -> SBElementArray
        /// Array of character objects - this subdivides the text into characters.
        @objc(characters) optional func untypedCharacters() -> SBElementArray
        /// Array of paragraph objects - this subdivides the text into paragraphs.
        @objc(paragraphs) optional func untypedParagraphs() -> SBElementArray
        /// Array of word objects - this subdivides the text into words.
        @objc(words) optional func untypedWords() -> SBElementArray
    }

    // MARK: - paragraph
    /// This subdivides the text into paragraphs.
    @objc(TextEditParagraph) public protocol Paragraph: TextEditSBObjectProtocol, Item {
        /// The color of the first character.
        @objc optional var color: Color { get set }
        /// The name of the font of the first character.
        @objc optional var font: String { get set }
        /// The size in points of the first character.
        @objc optional var size: Int { get set }
        /// Array of attachment objects - represents an inline text attachment.  This class is used mainly for make commands.
        @objc(attachments) optional func untypedAttachments() -> SBElementArray
        /// Array of attribute run objects - this subdivides the text into chunks that all have the same attributes.
        @objc(attributeRuns) optional func untypedAttributeRuns() -> SBElementArray
        /// Array of character objects - this subdivides the text into characters.
        @objc(characters) optional func untypedCharacters() -> SBElementArray
        /// Array of paragraph objects - this subdivides the text into paragraphs.
        @objc(paragraphs) optional func untypedParagraphs() -> SBElementArray
        /// Array of word objects - this subdivides the text into words.
        @objc(words) optional func untypedWords() -> SBElementArray
    }

    // MARK: - text
    /// Rich (styled) text
    @objc(TextEditText) public protocol Text: TextEditSBObjectProtocol, Item {
        /// The color of the first character.
        @objc optional var color: Color { get set }
        /// The name of the font of the first character.
        @objc optional var font: String { get set }
        /// The size in points of the first character.
        @objc optional var size: Int { get set }
        /// Array of attachment objects - represents an inline text attachment.  This class is used mainly for make commands.
        @objc(attachments) optional func untypedAttachments() -> SBElementArray
        /// Array of attribute run objects - this subdivides the text into chunks that all have the same attributes.
        @objc(attributeRuns) optional func untypedAttributeRuns() -> SBElementArray
        /// Array of character objects - this subdivides the text into characters.
        @objc(characters) optional func untypedCharacters() -> SBElementArray
        /// Array of paragraph objects - this subdivides the text into paragraphs.
        @objc(paragraphs) optional func untypedParagraphs() -> SBElementArray
        /// Array of word objects - this subdivides the text into words.
        @objc(words) optional func untypedWords() -> SBElementArray
    }

    // MARK: - word
    /// This subdivides the text into words.
    @objc(TextEditWord) public protocol Word: TextEditSBObjectProtocol, Item {
        /// The color of the first character.
        @objc optional var color: Color { get set }
        /// The name of the font of the first character.
        @objc optional var font: String { get set }
        /// The size in points of the first character.
        @objc optional var size: Int { get set }
        /// Array of attachment objects - represents an inline text attachment.  This class is used mainly for make commands.
        @objc(attachments) optional func untypedAttachments() -> SBElementArray
        /// Array of attribute run objects - this subdivides the text into chunks that all have the same attributes.
        @objc(attributeRuns) optional func untypedAttributeRuns() -> SBElementArray
        /// Array of character objects - this subdivides the text into characters.
        @objc(characters) optional func untypedCharacters() -> SBElementArray
        /// Array of paragraph objects - this subdivides the text into paragraphs.
        @objc(paragraphs) optional func untypedParagraphs() -> SBElementArray
        /// Array of word objects - this subdivides the text into words.
        @objc(words) optional func untypedWords() -> SBElementArray
    }

    // MARK: - print settings
    @objc(TextEditPrintSettings) public protocol PrintSettings: TextEditSBObjectProtocol {
        /// The number of copies of a document to be printed
        @objc optional var copies: Int { get set }
        /// Should printed copies be collated?
        @objc optional var collating: Bool { get set }
        /// The first page of the document to be printed
        @objc optional var startingPage: Int { get set }
        /// The last page of the document to be printed
        @objc optional var endingPage: Int { get set }
        /// Number of logical pages laid across a physical page
        @objc optional var pagesAcross: Int { get set }
        /// Number of logical pages laid out down a physical page
        @objc optional var pagesDown: Int { get set }
        /// The time at which the desktop printer should print the document
        @objc optional var requestedPrintTime: Date { get set }
        /// How errors are handled
        @objc optional var errorHandling: OSType { get set }
        /// For fax number
        @objc optional var faxNumber: String { get set }
        /// For target printer
        @objc optional var targetPrinter: String { get set }
    }

    // MARK: - Application Convenience Function

    /// Return an instance of the application.
    ///
    /// This property creates an instance of the application using its bundle identifier
    /// and returns an optional Application instance if the application is available
    public static var application: TextEdit.Application! {
        SBApplication(bundleIdentifier: "com.apple.TextEdit")
    }
}

extension SBApplication: TextEdit.Application {}

extension SBObject: TextEdit.Color {}

extension SBObject: TextEdit.Document {}

extension SBObject: TextEdit.Item {}

extension SBObject: TextEdit.Window {}

extension SBObject: TextEdit.Attachment {}

extension SBObject: TextEdit.AttributeRun {}

extension SBObject: TextEdit.Character {}

extension SBObject: TextEdit.Paragraph {}

extension SBObject: TextEdit.Text {}

extension SBObject: TextEdit.Word {}

extension SBObject: TextEdit.PrintSettings {}

// MARK: - Strongly Typed Extensions

/// Strongly typed accessors for application
public extension TextEdit.Application {
    /// Strongly typed accessor for document elements
    var documents: [TextEdit.Document] {
        untypedDocuments?() as? [TextEdit.Document] ?? []
    }
    /// Strongly typed accessor for window elements
    var windows: [TextEdit.Window] {
        untypedWindows?() as? [TextEdit.Window] ?? []
    }
}

/// Strongly typed accessors for attribute run
public extension TextEdit.AttributeRun {
    /// Strongly typed accessor for attachment elements
    var attachments: [TextEdit.Attachment] {
        untypedAttachments?() as? [TextEdit.Attachment] ?? []
    }
    /// Strongly typed accessor for attribute run elements
    var attributeRuns: [TextEdit.AttributeRun] {
        untypedAttributeRuns?() as? [TextEdit.AttributeRun] ?? []
    }
    /// Strongly typed accessor for character elements
    var characters: [TextEdit.Character] {
        untypedCharacters?() as? [TextEdit.Character] ?? []
    }
    /// Strongly typed accessor for paragraph elements
    var paragraphs: [TextEdit.Paragraph] {
        untypedParagraphs?() as? [TextEdit.Paragraph] ?? []
    }
    /// Strongly typed accessor for word elements
    var words: [TextEdit.Word] {
        untypedWords?() as? [TextEdit.Word] ?? []
    }
}

/// Strongly typed accessors for character
public extension TextEdit.Character {
    /// Strongly typed accessor for attachment elements
    var attachments: [TextEdit.Attachment] {
        untypedAttachments?() as? [TextEdit.Attachment] ?? []
    }
    /// Strongly typed accessor for attribute run elements
    var attributeRuns: [TextEdit.AttributeRun] {
        untypedAttributeRuns?() as? [TextEdit.AttributeRun] ?? []
    }
    /// Strongly typed accessor for character elements
    var characters: [TextEdit.Character] {
        untypedCharacters?() as? [TextEdit.Character] ?? []
    }
    /// Strongly typed accessor for paragraph elements
    var paragraphs: [TextEdit.Paragraph] {
        untypedParagraphs?() as? [TextEdit.Paragraph] ?? []
    }
    /// Strongly typed accessor for word elements
    var words: [TextEdit.Word] {
        untypedWords?() as? [TextEdit.Word] ?? []
    }
}

/// Strongly typed accessors for paragraph
public extension TextEdit.Paragraph {
    /// Strongly typed accessor for attachment elements
    var attachments: [TextEdit.Attachment] {
        untypedAttachments?() as? [TextEdit.Attachment] ?? []
    }
    /// Strongly typed accessor for attribute run elements
    var attributeRuns: [TextEdit.AttributeRun] {
        untypedAttributeRuns?() as? [TextEdit.AttributeRun] ?? []
    }
    /// Strongly typed accessor for character elements
    var characters: [TextEdit.Character] {
        untypedCharacters?() as? [TextEdit.Character] ?? []
    }
    /// Strongly typed accessor for paragraph elements
    var paragraphs: [TextEdit.Paragraph] {
        untypedParagraphs?() as? [TextEdit.Paragraph] ?? []
    }
    /// Strongly typed accessor for word elements
    var words: [TextEdit.Word] {
        untypedWords?() as? [TextEdit.Word] ?? []
    }
}

/// Strongly typed accessors for text
public extension TextEdit.Text {
    /// Strongly typed accessor for attachment elements
    var attachments: [TextEdit.Attachment] {
        untypedAttachments?() as? [TextEdit.Attachment] ?? []
    }
    /// Strongly typed accessor for attribute run elements
    var attributeRuns: [TextEdit.AttributeRun] {
        untypedAttributeRuns?() as? [TextEdit.AttributeRun] ?? []
    }
    /// Strongly typed accessor for character elements
    var characters: [TextEdit.Character] {
        untypedCharacters?() as? [TextEdit.Character] ?? []
    }
    /// Strongly typed accessor for paragraph elements
    var paragraphs: [TextEdit.Paragraph] {
        untypedParagraphs?() as? [TextEdit.Paragraph] ?? []
    }
    /// Strongly typed accessor for word elements
    var words: [TextEdit.Word] {
        untypedWords?() as? [TextEdit.Word] ?? []
    }
}

/// Strongly typed accessors for word
public extension TextEdit.Word {
    /// Strongly typed accessor for attachment elements
    var attachments: [TextEdit.Attachment] {
        untypedAttachments?() as? [TextEdit.Attachment] ?? []
    }
    /// Strongly typed accessor for attribute run elements
    var attributeRuns: [TextEdit.AttributeRun] {
        untypedAttributeRuns?() as? [TextEdit.AttributeRun] ?? []
    }
    /// Strongly typed accessor for character elements
    var characters: [TextEdit.Character] {
        untypedCharacters?() as? [TextEdit.Character] ?? []
    }
    /// Strongly typed accessor for paragraph elements
    var paragraphs: [TextEdit.Paragraph] {
        untypedParagraphs?() as? [TextEdit.Paragraph] ?? []
    }
    /// Strongly typed accessor for word elements
    var words: [TextEdit.Word] {
        untypedWords?() as? [TextEdit.Word] ?? []
    }
}

extension SBApplication: TextEditApplicationProtocol {}

extension SBObject: TextEditGenericMethods {}
